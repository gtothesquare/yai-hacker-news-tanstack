/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout/route'
import { Route as PathlessLayoutIndexImport } from './routes/_pathlessLayout/index'
import { Route as PathlessLayoutSearchImport } from './routes/_pathlessLayout/search'
import { Route as PathlessLayoutPageImport } from './routes/_pathlessLayout/$page'
import { Route as PathlessLayoutItemIdImport } from './routes/_pathlessLayout/item/$id'

// Create/Update Routes

const PathlessLayoutRouteRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutIndexRoute = PathlessLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)

const PathlessLayoutSearchRoute = PathlessLayoutSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)

const PathlessLayoutPageRoute = PathlessLayoutPageImport.update({
  id: '/$page',
  path: '/$page',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)

const PathlessLayoutItemIdRoute = PathlessLayoutItemIdImport.update({
  id: '/item/$id',
  path: '/item/$id',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/$page': {
      id: '/_pathlessLayout/$page'
      path: '/$page'
      fullPath: '/$page'
      preLoaderRoute: typeof PathlessLayoutPageImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
    '/_pathlessLayout/search': {
      id: '/_pathlessLayout/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof PathlessLayoutSearchImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
    '/_pathlessLayout/': {
      id: '/_pathlessLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PathlessLayoutIndexImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
    '/_pathlessLayout/item/$id': {
      id: '/_pathlessLayout/item/$id'
      path: '/item/$id'
      fullPath: '/item/$id'
      preLoaderRoute: typeof PathlessLayoutItemIdImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
  }
}

// Create and export the route tree

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutPageRoute: typeof PathlessLayoutPageRoute
  PathlessLayoutSearchRoute: typeof PathlessLayoutSearchRoute
  PathlessLayoutIndexRoute: typeof PathlessLayoutIndexRoute
  PathlessLayoutItemIdRoute: typeof PathlessLayoutItemIdRoute
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutPageRoute: PathlessLayoutPageRoute,
  PathlessLayoutSearchRoute: PathlessLayoutSearchRoute,
  PathlessLayoutIndexRoute: PathlessLayoutIndexRoute,
  PathlessLayoutItemIdRoute: PathlessLayoutItemIdRoute,
}

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PathlessLayoutRouteRouteWithChildren
  '/$page': typeof PathlessLayoutPageRoute
  '/search': typeof PathlessLayoutSearchRoute
  '/': typeof PathlessLayoutIndexRoute
  '/item/$id': typeof PathlessLayoutItemIdRoute
}

export interface FileRoutesByTo {
  '/$page': typeof PathlessLayoutPageRoute
  '/search': typeof PathlessLayoutSearchRoute
  '/': typeof PathlessLayoutIndexRoute
  '/item/$id': typeof PathlessLayoutItemIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren
  '/_pathlessLayout/$page': typeof PathlessLayoutPageRoute
  '/_pathlessLayout/search': typeof PathlessLayoutSearchRoute
  '/_pathlessLayout/': typeof PathlessLayoutIndexRoute
  '/_pathlessLayout/item/$id': typeof PathlessLayoutItemIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/$page' | '/search' | '/' | '/item/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/$page' | '/search' | '/' | '/item/$id'
  id:
    | '__root__'
    | '/_pathlessLayout'
    | '/_pathlessLayout/$page'
    | '/_pathlessLayout/search'
    | '/_pathlessLayout/'
    | '/_pathlessLayout/item/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_pathlessLayout"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout/route.tsx",
      "children": [
        "/_pathlessLayout/$page",
        "/_pathlessLayout/search",
        "/_pathlessLayout/",
        "/_pathlessLayout/item/$id"
      ]
    },
    "/_pathlessLayout/$page": {
      "filePath": "_pathlessLayout/$page.tsx",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/search": {
      "filePath": "_pathlessLayout/search.tsx",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/": {
      "filePath": "_pathlessLayout/index.tsx",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/item/$id": {
      "filePath": "_pathlessLayout/item/$id.tsx",
      "parent": "/_pathlessLayout"
    }
  }
}
ROUTE_MANIFEST_END */
